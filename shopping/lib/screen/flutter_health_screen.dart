import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:healthhub/healthhub.dart';
import "package:http/http.dart" as http;

class FlutterHealthScreen extends StatefulWidget {
  @override
  _FlutterHealthScreenState createState() => _FlutterHealthScreenState();
}

class _FlutterHealthScreenState extends State<FlutterHealthScreen>
    with WidgetsBindingObserver {
  Timer timer;
  var _healthDataList = List<HealthDataPoint>();

  final authorizationEndpoint =
      Uri.parse('https://accounts.google.com/o/oauth2/v2/auth');
  final redirectUrl = 'https://github.com/beobanhbo';
  final custom = 'https://github.com';
  final clientSecret = 'snv2TT2zLCZQgjfKmbazyiQt';
  final clientID =
      '1069007856560-frgqoha6c25sscmj8u6k07mdgcmioj88.apps.googleusercontent.com';
  var scope = [
    'https://www.googleapis.com/auth/fitness.activity.read',
    'https://www.googleapis.com/auth/fitness.activity.write',
  ];

  GoogleSignInAccount googleSignInAccunt;
  final GoogleSignIn googleSinIn = GoogleSignIn();

  Future<void> _handleSignIn() async {
    try {
      var d;
      await _googleSignIn.signIn().then((value) =>
          value.authentication.then((value) => d = value.accessToken));

      _requestFitness(d);
    } catch (error) {
      print(error);
    }
  }

  Future<void> _requestFitness(String accessToken) async {
    final Map<String, dynamic> body = {
      "aggregateBy": [
        {
          "dataSourceId":
              "derived:com.google.step_count.delta:com.google.android.gms:estimated_steps"
        }
      ],
      "bucketByTime": {"durationMillis": 86400000},
      "startTimeMillis": 1600560000000,
      "endTimeMillis": 1601009322536
    };

    final http.Response response = await http.post(
        'https://www.googleapis.com/fitness/v1/users/me/dataset:aggregate',
        headers: {
          "Content-Type": "application/json",
          'authorization': 'Bearer $accessToken'
        },
        body: jsonEncode(body));

    Map responseBody = jsonDecode(response.body);
    print(responseBody);
    final result = Autogenerated.fromJson(responseBody);

    List<Bucket> listBucket = [];
    Value value = Value();
    for (int i = 0; i < result.bucket.length; i++) {
      listBucket.add(result.bucket[i]);
      print(result.bucket[i].startTimeMillis);
      print(result.bucket[i].endTimeMillis);
    }
    for (int i = 0; i < listBucket.length; i++) {
      _listpoint(listBucket[i].dataset[0].point);
    }
  }

  Future<int> _listpoint(List<Point> listPoint) async {
    var sum = 0;
    listPoint.forEach((element) {
      sum += element.value[0].intVal;
    });
    print(sum);
    return sum;
  }

  GoogleSignIn _googleSignIn = GoogleSignIn(
    scopes: <String>[
      'https://www.googleapis.com/auth/fitness.activity.read',
    ],
  );

  @override
  void initState() {
    super.initState();
    _handleSignIn();
  }

  // Platform messages are asynchronous, so we initialize in an async method.

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Plugin example app'),
          actions: <Widget>[
            IconButton(
              icon: Icon(Icons.sync),
              onPressed: () {},
            )
          ],
        ),
        body: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            Container(
              child: FlatButton(
                color: Colors.blue,
                child: Text(
                  "Check Google Fit",
                ),
              ),
            ),
            SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: _healthDataList.isEmpty
                  ? Text("null")
                  : Container(
                      height: MediaQuery.of(context).size.height * 0.6,
                      child: ListView.builder(
                          shrinkWrap: true,
                          itemCount: _healthDataList.length,
                          itemBuilder: (_, index) => ListTile(
                                title: Text(
                                    "${_healthDataList[index].dataType.toString()}: ${_healthDataList[index].value.toString()}"),
                                trailing:
                                    Text('${_healthDataList[index].unit}'),
                                subtitle: Text(
                                    '${DateTime.fromMillisecondsSinceEpoch(_healthDataList[index].dateFrom)} - ${DateTime.fromMillisecondsSinceEpoch(_healthDataList[index].dateTo)}'),
                              )),
                    ),
            ),
          ],
        ),
      ),
    );
  }
}

class Steps {
  String dateStart;
  String dateEnd;

  int step;

  Steps(this.dateStart, this.dateEnd, this.step);
}

class Autogenerated {
  List<Bucket> bucket;

  Autogenerated({this.bucket});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    if (json['bucket'] != null) {
      bucket = new List<Bucket>();
      json['bucket'].forEach((v) {
        bucket.add(new Bucket.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.bucket != null) {
      data['bucket'] = this.bucket.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Bucket {
  String startTimeMillis;
  String endTimeMillis;
  List<Dataset> dataset;

  Bucket({this.startTimeMillis, this.endTimeMillis, this.dataset});

  Bucket.fromJson(Map<String, dynamic> json) {
    startTimeMillis = json['startTimeMillis'];
    endTimeMillis = json['endTimeMillis'];
    if (json['dataset'] != null) {
      dataset = new List<Dataset>();
      json['dataset'].forEach((v) {
        dataset.add(new Dataset.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['startTimeMillis'] = this.startTimeMillis;
    data['endTimeMillis'] = this.endTimeMillis;
    if (this.dataset != null) {
      data['dataset'] = this.dataset.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Dataset {
  String dataSourceId;
  List<Point> point;

  Dataset({this.dataSourceId, this.point});

  Dataset.fromJson(Map<String, dynamic> json) {
    dataSourceId = json['dataSourceId'];
    if (json['point'] != null) {
      point = new List<Point>();
      json['point'].forEach((v) {
        point.add(new Point.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['dataSourceId'] = this.dataSourceId;
    if (this.point != null) {
      data['point'] = this.point.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Point {
  String startTimeNanos;
  String originDataSourceId;
  String endTimeNanos;
  List<Value> value;
  String dataTypeName;

  Point(
      {this.startTimeNanos,
      this.originDataSourceId,
      this.endTimeNanos,
      this.value,
      this.dataTypeName});

  Point.fromJson(Map<String, dynamic> json) {
    startTimeNanos = json['startTimeNanos'];
    originDataSourceId = json['originDataSourceId'];
    endTimeNanos = json['endTimeNanos'];
    if (json['value'] != null) {
      value = new List<Value>();
      json['value'].forEach((v) {
        value.add(new Value.fromJson(v));
      });
    }
    dataTypeName = json['dataTypeName'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['startTimeNanos'] = this.startTimeNanos;
    data['originDataSourceId'] = this.originDataSourceId;
    data['endTimeNanos'] = this.endTimeNanos;
    if (this.value != null) {
      data['value'] = this.value.map((v) => v.toJson()).toList();
    }
    data['dataTypeName'] = this.dataTypeName;
    return data;
  }
}

class Value {
  int intVal;

  Value({this.intVal});

  Value.fromJson(Map<String, dynamic> json) {
    intVal = json['intVal'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['intVal'] = this.intVal;
    return data;
  }
}
